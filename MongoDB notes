          ** Sab kuch padenge of mongoDB **
(1) basic 
(2) advanced
(3) projects

=> MongoDB Atlas,MongoDB compass bhi padenge

MongoDB company developed "MongoDB atlas" to provide Database service 

**************** Let's Begin ***************************
Introduction to mongoDB

Q) What is mongoDB ?
A) => MongoDB is open source means mongoDB banane ke liye jo bhi code tha voh openly available h

=>it is document oriented NoSQL dataase management system
meaning : it is a database which stores data in it, in the form of documents.
  
=>Designed for handling unstructed data.

=> This Database is developed by a company named as *10gen*
then the company name changed to *MongoDB*

=> this company wanted a large dataase that means this company wanted a *Humangous* Database

* HUMONGOUS *
  remove HU and US now what is left ??
  => MONGO


  Q) Differnce between SQL and MongoDB

              SQL                                                        MongoDB (NoSQL)

  (1) Sql databases are relational databases.                            (1) Nosql databases are non relational databases

  (2) They store structured data                                         (2) Store unstructed semi structired data

  (3) Suitable for application with well-defined schemas                 (3) Ideal for applications with evolving/dynamic databases for example on youtube any body can register
                                                                             at any  time
  
  (4) E-commerce ,HR managment                                           (4) Content managment system,social media platforms,gaming

  (5) SQL is a big term..uske ander Mysql,postgreSQL,oracle              (5) MongoDB,redis
      aata h


                                                       *********      SQL ***************


-- Table: students

| student_id | first_name | last_name | age | grade |
|------------|------------|-----------|-----|-------|
|     1      |   John     |   Doe     |  17 |   11  |
|     2      |   Jane     |  Smith    |  16 |   10  |


-- Table: subjects

| subject_id | subject_name |
|------------|--------------|
|     1      |   Math       |
|     2      |   Science    |


-- Table: grades

| subject_id | student_id | marks |
|------------|------------|-------|
|     1      |     1      |  85   |
|     2      |     1      |  90   |


                                 *******     MongoDB **************
```json
// students collection
[
  {
    "student_id": 1,
    "first_name": "John",
    "last_name": "Doe",
    "age": 17,
    "grade": 11
  },
  {
    "student_id": 2,
    "first_name": "Jane",
    "last_name": "Smith",
    "age": 16,
    "grade": 10
  }
]

// subjects collection
[
  {
    "subject_id": 1,
    "subject_name": "Math"
  },
  {
    "subject_id": 2,
    "subject_name": "Science"
  }
]

// grades collection
[
  {
    "subject_id": 1,
    "student_id": 1,
    "teacher_name":"max",
    "marks": 85
  },
  {
    "subject_id": 2,
    "student_id": 1,
    "marks": 90
  }
]


In grades collection for student_id:1 , i can add an extra field let's say "teacher_name":"max" , without effecting others therefore mondoDB is said to be flexible.

MongoDB is schemaless because ::::

MongoDB mein "schemaless" ka matlab hai ki aapko pehle se define ki gayi rigid schema (jaise traditional SQL databases mein hoti hai) ki zarurat nahi hoti. Iska matlab hai ki aap apne documents mein koi bhi field add ya remove kar sakte hain bina kisi formal schema definition ke. MongoDB flexible schema support karta hai, jisme aap different documents mein different fields ka use kar sakte hain.

Is flexibility ke karan, MongoDB ko "schemaless" database system kaha jata hai. Lekin, yeh flexibility ka matlab yeh nahi hai ki MongoDB mein schema nahi hoti. MongoDB mein bhi schema hoti hai, lekin woh traditional SQL databases ki tarah rigid nahi hoti.

SQL is schema-based !

In mongoDB in one database , there would be multiple collections and in that collections their would be multiple documents , that documents are schemaless


**MongoDB Database
   |
   |-- Collection 1
   |      |
   |      |-- Document 1
   |      |
   |      |-- Document 2
   |      |
   |      |-- Document 3
   |
   |-- Collection 2
   |      |
   |      |-- Document 1
   |      |
   |      |-- Document 2
   |
   |-- Collection 3
          |
          |-- Document 1
          |
          |-- Document 2
**

************************ MongoDB Features **************************************

* Flexible Schema Design

=> schema-less , therefore can accommodate changes in a document

* Document Oriented Storage

=> Data is stored in JSON- like BSON documents ( to be learned )

* Dynamic Queries (indexes) => (to be learned)

* Aggregation framework (to be learned)

* open source

*********************** HOW MONGODB WORKS *******************************

Frontend : HTML,CSS,JS , React js 

Backend : Node js , Express js , Next js 

Node js  requests mongoDB server , to store data in the database.

MongoDB server has a storage engine => WiredTiger

* Storage engine communicates with the database and storage engine main fuction is to read and write data in the database
* Storage engine also converts json data to bson data ( to be learned )

Database : MongoDB

Mongo shell ( playground ) with the help of this , i dont need a backend to talk with database !

*********************     JSON VS BSON ******************************

=> In MongoDB , data is stored internally in BSON format.
   BSON means binery representation of JSON

=> we write data in bson , and the storage engine converts that json into bson. 
                ** WHY **
=> via BSON , there is higher read and write speeds , reduced storage requirements, and improved data manipulation capabilities. 

JSON Data = > Easy to read

{
   "name": "John Doe",
   "age": 30,
   "email": "john.doe@example.com",
   "address": {
      "street": "123 Main St",
      "city": "Anytown",
      "zipcode": "12345"
   },
   "is_active": true,
   "tags": ["mongodb", "database", "nosql"]
}

BSON Data = > Not easy to read (Impossible)

\x1F\x00\x00\x00
\x02\x6E\x61\x6D\x65\x00\x0A\x00\x00\x00\x4A\x6F\x68\x6E\x20\x44\x6F\x65
\x10\x61\x67\x65\x00\x1E\x00\x00\x00
\x02\x65\x6D\x61\x69\x6C\x00\x18\x00\x00\x00\x6A\x6F\x68\x6E\x2E\x64\x6F
\x65\x40\x65\x78\x61\x6D\x70\x6C\x65\x2E\x63\x6F\x6D
\x03\x61\x64\x64\x72\x65\x73\x73\x00
\x30\x00\x00\x00\x03\x73\x74\x72\x65\x65\x74\x00\x1B\x00\x00\x00\x31\x32
\x33\x20\x4D\x61\x69\x6E\x20\x53\x74\x00\x41\x6E\x79\x74\x6F\x77\x6E\x00
\x00
\x00\x01\x69\x73\x5F\x61\x63\x74\x69\x76\x65\x00\x01
\x74\x61\x67\x73\x00\x29\x00\x00\x00\x04\x30\x00\x08\x00\x00\x00\x6D\x6F
\x6E\x67\x6F\x64\x62\x00\x01\x00\x00\x00\x04\x31\x00\x08\x00\x00\x00\x64
\x61\x74\x61\x62\x61\x73\x65\x00\x03\x00\x00\x00\x6E\x6F\x73\x71\x6C\x00


MongoDB installation TimeStamb=> [ 38 to 44 ]

** IN CMD **

Command: mongosh
desc: to enter in the mongo shell

Command: show dbs / show databases
desc: to see the databases already present in mongoDB

admin,config,local are defult databases present in mongoDB

Command: use <database-name>
desc: new database create
and to swtich to a database 

Command:db.dropDatabse()
desc: to delete the database ( it will delete the current database which we were using )

Command: show collections;
desc:to see collections of the current using database

Command: db.createCollection('<collection-name>');
desc:to create a collection

Command:dp.<collection-name>.drop();
desc:to delete a collection

Command:db.collectionname.find()
desc: this command returns all the data present in the collection=>collectionaname

** you wont see a database listed in the output of the "show dbs" command until that database contains at least one collection with data in it.  **

**************************************************** INSERT OPERATIONS IN MONGODB ***********************************************

* It inserts one document

db.collectionName.insertOne({
   field1:value1,
   field2:value2,
})

* It inserts multiple documents

db.collectionName.insertMany(
  [ { document 1},
    { document 2},
    { document 3 } ..
  ]
)

after successfull insertion mongoDB assigns us Inserted Id for each document.

************* When to use quotes and when not to **********************

* Special Characters
=> If a field name contains special characters or spaces, or starts with a numeric digit, using quotes is necessary.

* Reserved Words
=> If a field name is a reserved keyword in MongoDB, use quotes

db.collectionName.insertOne(
   {
      "name": "John Doe",
      "age": 30,
      "email": "john.doe@example.com",
      "if": "some value" // "if" is a reserved keyword, so it should be enclosed in quotes
   }
)

*************************** Ordered and Unordered Inserts ************************************

Ordered Inserts :
 => db.<collection-name>.insertMany([ doc1, doc2, ... ]);
    Default behavior is ordered, where MongoDB stops on the first error.
    Suppose i want to insert 3 documents and i got a error on second document , then mongoDB will stop and i will not be able tp insert third 
    document while the third document was error free.
 
Unordered Inserts
=>  When executing bulk insert operations with {ordered:false}, MongoDB skips the insertion of documents with error and insert correct docuements only
=> db.<collection-name>.insertMany([ doc1, doc2, ... ], { ordered: false });

*************************** Case Sensitivity in MongoDB **************************************************

=> Collection names are case-sensitive.
=> Field names within documents are also case-sensitive.

db.Product.insertOne({ name: 'thapa', age: 30 });
db.product.insertOne({ name: 'thapa', age: 30 });

both collections are different

************************* Finding Documents in MongoDB ***************************************************

* find()
  db.collection_name.find({ key: value })

=> it returns all the documents having this specific key and value

* findOne()
  db.collection_name.findOne({ key: value })

=> it returns only the single document having this key and value

*************** Importing JSON IN MongoDB ******************

mongoImport and MongoExport are MongoDB Database tools toh inhe bhi alag se download kerna padhta h

* mongoimport jsonfile.json –d database_name –c collection_name
like : mongoimport products.json -d shop -c products

if you want to import array which consist objects then use -- jsonArray

like : mongoimport products.json -d shop -c products --jsonArray

* mongoexport : if we want to export data to a other file

mongoexport -d database_name -c collection_name -o "destination file path"

Limited to imports of 16 MB or smaller only

******************* Comparison Operators **********************

$eq $ne $gt $gte
$lt $lte $in $nin


db.collectionName.find({ 'fieldname': { $operator: value } });


db.products.find({ 'price': { $eq: 699 } });
db.products.find({ 'price': { $ne: 699 } });
db.products.find({ 'price': { $gt: 699 } });
db.products.find({ 'price': { $gte: 699 } });
db.products.find({ 'price': { $lt: 699 } });
db.products.find({ 'price': { $lte: 699 } });


db.category.find({ 'price': { $in: [249, 129, 39] } });

we get the whole document satisphying the condition of price

*********** Cursors in MongoDB **************

In MongoDB, cursors are pointers to the result set of a query. When you execute a query in MongoDB, it returns a cursor, which is essentially a pointer to the result set of that query.

Cursors are particularly useful when dealing with large result sets, as they allow you to retrieve a subset of the results at a time

*********** Cursor Methods ******************

count() limit() skip() sort()

* db.products.find({ 'price': { $gt: 250 } }).count()
=> total number of documents satisphying the above condition
 
* db.products.find({ 'price': { $gt: 250 } }).limit(5);
=> from all the documents satisphying the condtion i want only 5 documents

* db.products.find({ 'price': { $gt: 250 } }).limit(5).skip(2);
=> first 5 documents will be there satisphying the price condition now we want to skil 2 documents therefore remaining documents will be 3
but as limit is 5 therefore 2 more documents will be added which satisphyes the condition

* db.products.find({ 'price': { $gt: 1250 } })'.limit(3).sort({ 'price': 1 });
=> this sorting does not work with "nin" operator

(1) for ascending and (-1) for descending

************ Cursor Methods (Caveats/Warning) ***************************

* skip() can be inefficient for large offsets: [ Offsets" refer to the number of documents to skip before starting to return the documents ]

If you're skipping a small number of documents, this is not a problem. However, if you're skipping a large number of documents, MongoDB has to read and discard a large amount of data, which can be inefficient, especially for large collections.

For example, let's say you have a collection with 1 million documents, and you want to skip the first 900,000 documents and retrieve the remaining 100,000. Using skip() in this scenario would require MongoDB to read and skip over 900,000 documents before returning the remaining 100,000. This can be slow and inefficient.

* Using sort() on large result sets may impact performance.

=>For example, let's say you have a collection with 1 million documents, and you want to sort them by a particular field. MongoDB would have to sort all 1 million documents before returning the sorted result set. This can be slow and resource-intensive, especially for large collections.

* limit() and skip() saath saath use kerna also increases burden on MongoDB

************ Logical Operators **********************
$and $or $not $nor

{ $and: [ { condition1 }, { condition2 }, ... ] }

{ field: { $not: { operator: value } } }

* db.products.find({ $and: [ { 'price':{$gt:100} }, { 'name':'Diamond Ring' } ] })
=> returns all the documents having satisphied all the 2 conditions.

* db.products.find({ $or: [ { 'price':{$gt:100} }, { 'name':'Diamond Ring' } ] })
=> returns all the documents having satisphied any on the one above condition, or both the condition satisphied

* db.products.find({ 'price':{$gt:100},'name':'Diamond Ring' })
=> This also works , as by default mongoDB treats them as an implicit AND operation.

* db.products.find({ $nor: [ { 'price':{$gt:100} }, { 'name':'Diamond Ring' } ] })
=> this says pehli condition ko chod ke and dusri condition ko chod ke baki jo bhi h sab dikha do, means 1st and 2nd condition should be false,so that i can show some data(document)

*  db.products.find({'price':{$not:{$eq:100}}})
=> it returns all the data where price is "not" equal to ("eq") 100.
aise bhi ker sakte the => db.products.find({'price':{$neq:100}})

*  db.products.find({'price':{$not:{$lt:100}}})

*********************** Complex Expressions **************************

$expr operator :

$expr is a query operator in MongoDB that allows you to use aggregation expressions within a find() query.

Useful when you need to compare fields from the same document in a more complex manner.

{ $expr: { operator: ['$field', value] } }

Q) Find fields where quantity * price is geater than totalprice
A)   db.sales.find({$expr:{ $gt : [                    , $totalprice ] }})

     db.sales.find({$expr:{ $gt : [ { $multiply:['$quantity','$price'] } , $totalprice ] }})

     db.sales.find({$expr:{ $gt : [ { $add:['$quantity','$price'] } , $totalprice ] }})


**************** Elements Operator ************************

$exists $type $size

* .find({ field: { $exists: <boolean>} })

=> whether field is present or not irrespective of its value

  .find({ name: { $exists:true} , price: {$gt:300} })

=> name field exists and the price is greater than 300

* .find({ field: { $type: "<bson-data-type>" } })

=> Bson type values (just like a datatype)

1. **Double**: Floating-point value.
2. **String**: UTF-8 encoded string.
3. **Object**: Embedded document.
4. **Array**: Ordered list of values.
5. **Binary Data**: Binary data.
6. **Undefined**: Deprecated.
7. **ObjectID**: 12-byte ID for documents.
8. **Boolean**: Boolean value.
9. **Date**: UTC datetime.
10. **Null**: Null value.
11. **Regular Expression**: Regular expression.
12. **DBPointer**: Deprecated.

db.products.find({price:{$type:'number'}}.count()
give me the data where price data type is a number.

db.products.find({isFeature:{$type:'bool'}}.count()
aise bhi likh sakte h
db.products.find({isFeature:{$type:8}}.count()
  
* .find({ field: { $size: <array-length> } })
=> db.comments.find({'comments':{$size:4}})
       |             this is a field name
     comments is a collection name

basically comments collection has a field name collection which is an array of objects

this command returns only those documents having comments array size 4


***************** Projection *********************
db.collection.find({}, { field1: 1, field2: 1 })

=>To include specific fields, use projection with a value of 1 for the fields you want.
=>To exclude fields, use projection with a value of 0 for the fields you want to
exclude.
=>You cannot include and exclude fields simultaneously in the same query
projection  **EXCEPTION** {name:1,_id:0}  can write only _id:0

=> db.comments.find({'comments':{$size:2}},{comments:1,title:0}); ===========> W.R.O.N.G

* db.comments.find({'comments':{$size:2}});

it returns the full document satisphysing the condition that the comments size is 2

now i only want to see the comments portiion of the document and by deafult mongoDB adds a _id filed which i do not want to see therefore i do this !!

=> db.comments.find({'comments':{$size:2}},{comments:1,_id:0});

**************** Embedded Documents *********************

db.collection.find({ “parent.child”: value })

db.collection.find({ “parent.child”: {$gt:1200} })
                                      (Condition)

****************** $all and $elem **********************

$all:

{ <field>: { $all: [ <value1> , <value2> ... ] } }

basically i want all the names in my comments.user ! ! ! 
db.comments.find({'comments.user':{$all:['Alice','Vinod']}})

$in : checks whether any from them is present or not  ['Alice','bob']

$elem:

{ <field>: { $elemMatch: { <query1>, <query2>, ... } } }

 if we want to check multiple conditions of an embedded document !
comments.user=vinod and comments.text=dev

i can write this two times also =>  db.collection.find({ “parent.child”: value })

db.comments.find({'comments.user':{$elemMatch:{'user':'vinod','text':'dev'}}})


*************** Update Operations inMongoDB *******************************

updateOne() and updateMany()

basically u can create a new field as well as update the value of an existing field

db.collectionName.updateOne(
{ filter },
{ $set: { existingField: newValue, newField: "new value", // ... }, }
);

db.collectionName.updateMany(
{ filter },
{ $set: { existingField: newValue, // ... }, }
);

**************** Removing and Renaming Fields **********************

db.collectionName.updateOne( { filter }, { $unset: { fieldName: 1 } } );

db.collectionName.updateOne(
 { filter },
 { $rename: { oldFieldName: "newFieldName" } }
);

*************** Updating arrays and Embedded Documents *****************

db.collectionName.updateOne(
 { filter },
 { $push: { arrayField: "new element" } }
);

db.collectionName.updateOne(
 { filter },
 { $pop: { arrayField: 1 } }
);

it pops the last element of the array


comments.user: "dev" ussi ki hi comments.text ko update kerna h

db.collectionName.updateOne(
 { filter },
 { $set: { "arrayField.$.text": "Updated text" } }
);

*********** Delete Operations in MongoDB *******************
From a collection to delete one document
 db.collectionName.deleteOne({ _id:1 });

From a collection to delete multiple document,,here multiple documents having price : 55 have been deleted !
db.sales.deleteMany({ price: 55 });

if you want to delete a specific 'field' then use "unset" discussed above in renaming section

*************** Indexes *********************

baki ka pdf + video se dekho ! !







































 















