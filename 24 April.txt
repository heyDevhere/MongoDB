void countJourneys(vector<int>& a, vector<int>& b) {
    int n = a.size();
    
    // Initialize dp array
    vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(2, vector<int>(2, 0)));
    
    // Base case
    //2nd wala 

//    1 is b
//   0 is a

//3rd wala

// 0 is even
// 1 is odd

    if(b[1]%2==0){
      dp[1][b][even] = 1 ; 
      dp[1][b][odd] = 0 ; 
    }
    else{
      dp[1][b][even] = 0 ; 
      dp[1][b][odd] = 1 ; 
    }
    
    
    if(a[1]%2==0){
      dp[1][a][even] = 1 ; 
      dp[1][a][odd] = 0 ; 
    }
    else{
      dp[1][a][even] = 0 ; 
      dp[1][a][odd] = 1 ; 
    }
    
    
    
    // Dynamic programming
    for (int i = 2; i <= n; ++i) {
        // Update dp[i][a][even]
        if (a[i] % 2 == 0) {
            dp[i][a][even] = (dp[i - 1][a][even] + dp[i - 1][b][even])  ;
        } else {
            dp[i][a][even] = (dp[i - 1][a][odd] + dp[i - 1][b][odd])  ;
        }
        
        // Update dp[i][a][odd]
        if(a[i] % 2 == 0) {
            dp[i][a][odd] = (dp[i - 1][a][odd] + dp[i - 1][b][odd])  ;
        } else {
            dp[i][a][odd] = (dp[i - 1][a][even] + dp[i - 1][b][even])  ;
        }
        
        // Update dp[i][b][even]
        if (b[i] % 2 == 0) {
            dp[i][b][even] = (dp[i - 1][a][even] + dp[i - 1][b][even])  ;
        } else {
            dp[i][b][even] = (dp[i - 1][a][odd] + dp[i - 1][b][odd])  ;
        }
        
        // Update dp[i][b][odd]
        if (b[i] % 2 == 0) {
            dp[i][b][odd] = (dp[i - 1][a][odd] + dp[i - 1][b][odd])  ;
        } else {
            dp[i][b][odd] = (dp[i - 1][a][even] + dp[i - 1][b][even])  ;
        }
    }


int evenJourneys = (dp[n][a][even] + dp[n][b][even])  ;
    int oddJourneys = (dp[n][a][odd] + dp[n][b][odd])  ;